actions.report = function(d, c) {
    if (validateFormReport()) {
        var b = "/report";
        $.ajax({
            type: "POST",
            url: b,
            data: $("#formReport").serialize(),
            success: function(e) {
                if (e.err == ApiError.SUCCESS) {
                    Materialize.toast("Cảm ơn bạn đã báo lỗi!", 2000);
                    $("#modalReport").closeModal()
                } else {
                    if (e.err == ApiError.BLOCKED) {
                        Materialize.toast("Không thể báo lỗi do đã bị chặn!", 2000);
                        $("#modalReport").closeModal()
                    } else {
                        Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 2000)
                    }
                }
            },
            error: function(g, e, f) {
                Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 2000)
            }
        })
    } else {
        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 2000)
    }
}
;
actions.showMdAddName = function(d, c) {
    var b = $("#nameCn");
    $("#nameVi").val(d.data("nvi"));
    b.val(d.data("ncn"));
    transText();
    var e = $("#mdAddName");
    e.on("close", function(f) {
        e.closeModal({
            out_duration: 0
        })
    });
    e.openModal()
}
;
function validateFormReport() {
    var c = true;
    var b = {};
    $.each($("#formReport").serializeArray(), function(d, e) {
        b[e.name] = e.value
    });
    if (!b.reason || b.reason.length > 1000) {
        $("textarea[name='reason']").removeClass("valid").addClass("invalid");
        c = false
    } else {
        $("textarea[name='reason']").removeClass("invalid").addClass("valid")
    }
    return c
}
$(function() {});
function changeNameList(c) {
    if (c.submit == "del") {
        $("#listName").find('li[data-ncn="' + c.nameCn + '"]').remove()
    } else {
        if (c.submit == "edit" || c.submit == "add") {
            var b = $("#mdListName").find('li[data-ncn="' + c.nameCn + '"]');
            if (b.length !== 0) {
                b.data("nvi", c.nameVi).text(c.nameCn + "=" + c.nameVi)
            } else {
                var d = $("#sampleListNameItem").clone().children();
                d.data("ncn", c.nameCn).data("nvi", c.nameVi).text(c.nameCn + "=" + c.nameVi);
                $("#listName").append(d)
            }
        }
    }
}
var changeNameTimer;
$("#nameCn").on("input", function() {
    if (changeNameTimer) {
        clearTimeout(changeNameTimer)
    }
    var b = $(this);
    changeNameTimer = setTimeout(function() {
        transText(b.val())
    }, 1000)
});
actions.openListNamePaste = function(c, b) {
    $("#mdListNamePaste").openModal()
}
;
actions.submitListName = function(g, c) {
    var k = $("#txtListName").val();
    var l = k.match(/[^\r\n]+/g);
    var j = true;
    var d = [];
    for (var f = 0; f < l.length; f++) {
        var h = l[f].split("=");
        if (h.length == 2) {
            d.push({
                nameCn: h[0],
                nameVi: h[1]
            })
        } else {
            j = false;
            break
        }
    }
    if (!j) {
        Materialize.toast("Định dạng không hợp lệ. Vui lòng kiểm tra lại.", 2000)
    } else {
        var e = [{
            name: "submit",
            value: "add"
        }, {
            name: "bookId",
            value: bookId
        }];
        d.forEach(function(i) {
            e.push({
                name: "nameCn",
                value: i.nameCn
            });
            e.push({
                name: "nameVi",
                value: i.nameVi
            })
        });
        var b = "/name";
        $.ajax({
            type: "POST",
            url: b,
            data: e,
            success: function(i) {
                if (i.err == ApiError.SUCCESS) {
                    Materialize.toast("Chỉnh sửa tên thành công!", 2000);
                    d.forEach(function(n) {
                        var m = $("#mdListName").find('li[data-ncn="' + n.nameCn + '"]');
                        if (m.length !== 0) {
                            m.data("nvi", n.nameVi).text(n.nameCn + "=" + n.nameVi)
                        } else {
                            var o = $("#sampleListNameItem").clone().children();
                            o.data("ncn", n.nameCn).data("nvi", n.nameVi).text(n.nameCn + "=" + n.nameVi);
                            $("#listName").append(o)
                        }
                    });
                    $("#mdListNamePaste").closeModal()
                } else {
                    if (i.err == ApiError.PARAMS_INVALID) {
                        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 2000)
                    } else {
                        if (i.err == ApiError.EXCEED_LIMIT) {
                            Materialize.toast("Đã vượt số name cho phép. Mời xóa bớt name thừa rồi thử lại.", 2000)
                        } else {
                            if (i.err == ApiError.SHORT_NAME) {
                                Materialize.toast("Bạn không thể add name 1 ký tự.", 2000)
                            } else {
                                if (i.err == ApiError.FORBID_NAME) {
                                    Materialize.toast("Name này đã bị chặn.", 2000)
                                } else {
                                    if (i.err == ApiError.NO_PERMISSION) {
                                        Materialize.toast("Bạn đã bị khóa chức năng chỉnh sửa name!", 5000)
                                    } else {
                                        Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 2000)
                                    }
                                }
                            }
                        }
                    }
                }
            },
            error: function(n, i, m) {}
        })
    }
}
;
function getListName() {
    var b = "";
    $.each($("#listName").find("li"), function(d, e) {
        var c = $(e);
        if (b) {
            b += "\n"
        }
        b += c.text()
    });
    return b
}
actions.applyAdmin = function(f, d) {
    var b = $("#formApplyAdmin");
    if (validateFormApplyAdmin(b)) {
        f.prop("disabled", true).removeClass("waves-effect");
        var c = "/book/admin/apply";
        var e = b.serializeArray();
        $.ajax({
            type: "POST",
            url: c,
            data: e,
            success: function(g) {
                if (g.err == ApiError.SUCCESS) {
                    if (g.data && g.data.become_owner) {
                        Materialize.toast("Bạn đã trở thành quản lý của truyện!", 5000)
                    } else {
                        Materialize.toast("Đã gửi tin nhắn thành công!", 5000)
                    }
                    f.closest(".modal").closeModal()
                } else {
                    if (g.err == ApiError.PARAMS_INVALID) {
                        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 5000)
                    } else {
                        if (g.err == ApiError.LOCKED) {
                            Materialize.toast("Bạn đã bị khóa chức năng xin đồng quản lý truyện!", 5000)
                        } else {
                            if (g.err == ApiError.BLOCKED) {
                                Materialize.toast("Không thể xin quyền đồng quản lý do đã bị chặn!", 5000)
                            } else {
                                if (g.err == ApiError.EXCEED_LIMIT) {
                                    Materialize.toast("Không thể xin quyền đồng quản lý do vượt quá giới hạn!", 5000)
                                } else {
                                    if (g.err == ApiError.VERIFY_EMAIL) {
                                        Materialize.toast("Vui lòng xác nhận email!", 5000)
                                    } else {
                                        Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 5000)
                                    }
                                }
                            }
                        }
                    }
                }
                f.prop("disabled", false).addClass("waves-effect")
            },
            error: function(i, g, h) {
                f.prop("disabled", false).addClass("waves-effect")
            }
        })
    } else {
        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 5000)
    }
}
;
function validateFormApplyAdmin(c) {
    var d = true;
    var b = {};
    $.each(c.serializeArray(), function(e, f) {
        b[f.name] = f.value
    });
    if (!b.message || b.message.length > 1000) {
        $("textarea[name='message']").removeClass("valid").addClass("invalid");
        d = false
    } else {
        $("textarea[name='message']").removeClass("invalid").addClass("valid")
    }
    return d
}
actions.deleteBook = function(c, b) {
    var d = $("#mdDelBookConfirm");
    d.find(".btn-confirm").data("value", c.data("value"));
    d.openModal()
}
;
actions.confirmDelBook = function(g, e) {
    var d = "/book";
    var c = g.closest(".modal");
    var b = c.find("form");
    var f = b.serializeArray();
    f.push({
        name: "bookId",
        value: g.data("value")
    });
    if (validateDeleteBookFormData(f)) {
        $.ajax({
            type: "DELETE",
            url: d,
            data: f,
            success: function(h) {
                if (h.err == ApiError.SUCCESS) {
                    Materialize.toast("Xóa truyện thành công!", 5000);
                    c.closeModal();
                    location.reload()
                } else {
                    if (h.err == ApiError.EXCEED_LIMIT) {
                        Materialize.toast("Bạn chỉ có thể xóa tối đa " + h.data.limit + " truyện trong ngày!", 5000)
                    } else {
                        if (h.err == ApiError.LOCKED) {
                            Materialize.toast("Bạn đã bị khóa chức năng xóa truyện!", 5000)
                        } else {
                            if (h.err == ApiError.WAIT_VOTE) {
                                Materialize.toast("Đã gửi tin nhắn hỏi ý kiến đồng quản lý.", 5000)
                            } else {
                                if (h.err == ApiError.PARAMS_INVALID) {
                                    Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 5000)
                                } else {
                                    Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 5000)
                                }
                            }
                        }
                    }
                }
            },
            error: function(j, h, i) {}
        })
    } else {
        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 2000)
    }
}
;
function validateDeleteBookFormData(c) {
    var d = true;
    var b = {};
    $.each(c, function(e, f) {
        b[f.name] = f.value
    });
    if (!b.reason || b.reason.length > 1000) {
        $("textarea[name='reason']").removeClass("valid").addClass("invalid");
        d = false
    } else {
        $("textarea[name='reason']").removeClass("invalid").addClass("valid")
    }
    return d
}
actions.setBookPrivate = function(f, d) {
    var b = "/book";
    var c = parseInt(f.data("value"));
    var e = {
        bookId: f.data("id"),
        isPrivate: c
    };
    f.find(".loading").removeClass("hide");
    $.ajax({
        type: "PUT",
        url: b,
        data: e,
        success: function(g) {
            f.find(".loading").addClass("hide");
            if (g.err == ApiError.SUCCESS) {
                Materialize.toast("Cập nhật thành công!", 5000);
                if (c) {
                    f.find(".checked").removeClass("hide")
                } else {
                    f.find(".checked").addClass("hide")
                }
                f.data("value", 1 - c)
            } else {
                if (g.err == ApiError.REQUIRE_CONTRIB) {
                    Materialize.toast("Yêu cầu 500 tích phân trở lên mới có thể đặt truyện ở chế độ riêng tư", 2000)
                } else {
                    if (g.err == ApiError.PARAMS_INVALID) {
                        Materialize.toast("Bạn phải là người đăng truyện mới có thể đặt truyện ở chế độ riêng tư", 2000)
                    } else {
                        if (g.err == ApiError.EXCEED_LIMIT) {
                            Materialize.toast("Không thể chuyển công khai do truyện đã có phiên bản khác đang công khai", 2000)
                        } else {
                            if (g.err == ApiError.UNSUPPORT) {
                                Materialize.toast("Bạn chỉ có thể chuyển tối đa " + g.data.limit + " truyện sang riêng tư với cấp độ hiện tại của bạn.", 2000)
                            } else {
                                if (g.err == ApiError.WAIT_VOTE) {
                                    Materialize.toast("Đã gửi tin nhắn hỏi ý kiến đồng quản lý.", 2000)
                                } else {
                                    if (g.err == ApiError.LOCKED) {
                                        Materialize.toast("Bạn đã bị khóa chức năng chuyển riêng tư!", 2000)
                                    } else {
                                        if (g.err == ApiError.COPYRIGHT) {
                                            Materialize.toast("Truyện này đã bị khóa.", 2000)
                                        } else {
                                            Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 2000)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        error: function(i, g, h) {
            f.find(".loading").addClass("hide")
        }
    })
}
;
actions.extractName = function(c, b) {
    $("#mdExtractName").openModal()
}
;
actions.confirmExtractName = function(e, c) {
    var b = "/name/extract";
    if (bookId) {
        var d = [];
        d.push({
            name: "bookId",
            value: bookId
        });
        d.push({
            name: "merge",
            value: $("#chkMerge").is(":checked") ? 1 : 0
        });
        $.ajax({
            type: "POST",
            url: b,
            data: d,
            success: function(f) {
                if (f.err == ApiError.SUCCESS) {
                    Materialize.toast("Đang lọc lại danh sách name.", 10000)
                } else {
                    if (f.err == ApiError.LOCKED) {
                        $("#mdLockName").openModal()
                    } else {
                        if (f.err == ApiError.NO_PERMISSION) {
                            Materialize.toast("Bạn đã bị khóa chức năng chỉnh sửa name!", 10000)
                        } else {
                            Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 10000)
                        }
                    }
                }
            },
            error: function(h, f, g) {}
        })
    }
}
;
actions.confirmClearName = function(e, c) {
    var b = "/name/clear";
    if (bookId) {
        var d = [];
        d.push({
            name: "bookId",
            value: bookId
        });
        $.ajax({
            type: "POST",
            url: b,
            data: d,
            success: function(f) {
                if (f.err == ApiError.SUCCESS) {
                    Materialize.toast("Đã xóa danh sách name.", 10000);
                    $("#listName").empty()
                } else {
                    if (f.err == ApiError.LOCKED) {
                        $("#mdLockName").openModal()
                    } else {
                        if (f.err == ApiError.NO_PERMISSION) {
                            Materialize.toast("Bạn đã bị khóa chức năng chỉnh sửa name!", 10000)
                        } else {
                            Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 10000)
                        }
                    }
                }
            },
            error: function(h, f, g) {}
        })
    }
}
;
loadBookIndex = function(f, e, d) {
    var c = "/book/index";
    var b = signFunc(fuzzySign(signKey + f + e));
    $.ajax({
        type: "GET",
        url: c,
        data: {
            bookId: bookId,
            start: f,
            size: e,
            signKey: signKey,
            sign: b
        },
        success: function(g) {
            $(".volume-list").html(g);
            if (d) {
                $("html, body").animate({
                    scrollTop: $(".volume-list").offset().top
                }, 200)
            }
        },
        error: function(i, g, h) {}
    })
}
;
actions.loadBookIndex = function(d, c) {
    var e = d.data("start");
    var b = d.data("size");
    loadBookIndex(e, b, true)
}
;
actions.confirmDeleteBook = function(i, g) {
    var f = "/book/titan";
    if (bookId) {
        var e = i.closest(".modal");
        var d = e.find("form");
        var h = new FormData(d[0]);
        h.append("bookId", bookId);
        var c = $("#imgDelete").attr("src");
        if (c.startsWith("data:")) {
            var b = window.dataURLtoBlob && window.dataURLtoBlob(c);
            h.append("img", b)
        }
        if (validateDeleteBookFormData(d.serializeArray())) {
            $.ajax({
                type: "DELETE",
                url: f,
                data: h,
                xhr: function() {
                    var j = $.ajaxSettings.xhr();
                    return j
                },
                cache: false,
                contentType: false,
                processData: false,
                success: function(j) {
                    if (j.err == ApiError.SUCCESS) {
                        Materialize.toast("Xóa truyện thành công!", 5000);
                        e.closeModal();
                        location.reload()
                    } else {
                        if (j.err == ApiError.PARAMS_INVALID) {
                            Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 5000)
                        } else {
                            if (j.err == ApiError.EXCEED_LIMIT) {
                                Materialize.toast("Bạn chỉ có thể xóa tối đa " + j.data.limit + " truyện trong ngày!", 5000)
                            } else {
                                if (j.err == ApiError.WAIT_VOTE) {
                                    Materialize.toast("Đã gửi tin nhắn hỏi ý kiến đồng quản lý.", 2000)
                                } else {
                                    Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 5000)
                                }
                            }
                        }
                    }
                },
                error: function(l, j, k) {}
            })
        } else {
            Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 2000)
        }
    }
}
;
actions.reportAbuse = function(d, c) {
    if (validateFormReportAbuse()) {
        var b = "/report-abuse";
        $.ajax({
            type: "POST",
            url: b,
            data: $("#formReportAbuse").serialize(),
            success: function(e) {
                if (e.err == ApiError.SUCCESS) {
                    Materialize.toast("Cảm ơn bạn đã góp ý", 2000);
                    $("#mdReportAbuse").closeModal()
                } else {
                    if (e.err == ApiError.EXCEED_LIMIT) {
                        Materialize.toast("Bạn đã dùng hết 3 lượt cảnh cáo trong ngày.", 2000)
                    } else {
                        if (e.err == ApiError.LOCKED) {
                            Materialize.toast("Thành viên này đã bị cảnh cáo hôm nay. Mời quay lại ngày mai.", 2000)
                        } else {
                            Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 2000)
                        }
                    }
                }
            },
            error: function(g, e, f) {
                Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 2000)
            }
        })
    } else {
        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 2000)
    }
}
;
function validateFormReportAbuse() {
    var c = true;
    var b = {};
    $.each($("#formReportAbuse").serializeArray(), function(d, e) {
        b[e.name] = e.value
    });
    if (!b.reason || b.reason.length > 1000) {
        $("textarea[name='reason']").removeClass("valid").addClass("invalid");
        c = false
    } else {
        $("textarea[name='reason']").removeClass("invalid").addClass("valid")
    }
    return c
}
actions.confirmUpdateChapter = function(g, d) {
    var c = "/chapter/update";
    var f = $("#bookId").val();
    if (f) {
        var b = $("#formUpdateChapter");
        var e = b.serializeArray();
        e.push({
            name: "bookId",
            value: f
        });
        $.ajax({
            type: "POST",
            url: c,
            data: e,
            success: function(h) {
                if (h.err == ApiError.SUCCESS) {
                    Materialize.toast("Yêu cầu thành công. Vui lòng đợi nội dung được cập nhật.", 10000)
                } else {
                    if (h.err == ApiError.EXCEED_LIMIT) {
                        Materialize.toast("Bạn vừa yêu cầu cập nhật, vui lòng quay lại sau 24h.", 10000)
                    } else {
                        if (h.err == ApiError.EXCEED_DAILY_LIMIT) {
                            Materialize.toast("Bạn chỉ có thể vá tối đa " + h.data.limit + " truyện trong ngày!", 10000)
                        } else {
                            if (h.err == ApiError.LOCKED) {
                                $("#mdLockChapter").openModal()
                            } else {
                                if (h.err == ApiError.NO_PERMISSION) {
                                    Materialize.toast("Bạn đã bị khóa chức năng cập nhật chương!", 10000)
                                } else {
                                    if (h.err == ApiError.FORBID_NAME) {
                                        Materialize.toast("Truyện không được phép tẩy, xin hãy liên hệ đội quản lý.", 10000)
                                    } else {
                                        Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 10000)
                                    }
                                }
                            }
                        }
                    }
                }
            },
            error: function(j, h, i) {}
        })
    }
}
;
actions.loadReportHistory = function(d, c) {
    var b = "/report";
    var e = d.data("start");
    if (!e) {
        e = 0
    }
    $.ajax({
        type: "GET",
        url: b,
        data: {
            bookId: bookId,
            start: e
        },
        success: function(g) {
            var f = $("#mdReportHistory");
            f.find(".modal-content").mCustomScrollbar("destroy").html(g).mCustomScrollbar();
            f.openModal()
        },
        error: function(h, f, g) {}
    })
}
;
actions.loadBookHistory = function(e, c) {
    var b = "/history";
    var f = e.data("start");
    var d = e.data("group");
    if (!f) {
        f = 0
    }
    if (!d) {
        d = 0
    }
    $.ajax({
        type: "GET",
        url: b,
        data: {
            bookId: bookId,
            group: d,
            start: f
        },
        success: function(h) {
            var g = $("#mdHistoryActivity");
            g.find(".modal-content").mCustomScrollbar("destroy").html(h).mCustomScrollbar();
            g.openModal();
            $("#mdExportHistory").find('input[name="group"]').val(d)
        },
        error: function(i, g, h) {}
    })
}
;
actions.applyShare = function(f, d) {
    var b = $("#formApplyShare");
    if (validateFormApplyAdmin(b)) {
        f.prop("disabled", true).removeClass("waves-effect");
        var c = "/book/share/apply";
        var e = b.serializeArray();
        $.ajax({
            type: "POST",
            url: c,
            data: e,
            success: function(g) {
                if (g.err == ApiError.SUCCESS) {
                    Materialize.toast("Đã gửi tin nhắn thành công!", 5000);
                    f.closest(".modal").closeModal()
                } else {
                    if (g.err == ApiError.PARAMS_INVALID) {
                        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 5000)
                    } else {
                        if (g.err == ApiError.BLOCKED) {
                            Materialize.toast("Không thể xin quyền phó quản lý do đã bị chặn!", 5000)
                        } else {
                            Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 5000)
                        }
                    }
                }
                f.prop("disabled", false).addClass("waves-effect")
            },
            error: function(i, g, h) {
                f.prop("disabled", false).addClass("waves-effect")
            }
        })
    } else {
        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 5000)
    }
}
;
$(document).ready(function() {
    new Clipboard(".btn-copy-history",{
        text: function(b) {
            var c = "";
            $.each($("#mdHistoryActivity").find(".modal-content").find("div"), function(e, f) {
                var d = $(f);
                if (d.hasClass("report-time") || d.hasClass("report-message")) {
                    if (c) {
                        c += "\n"
                    }
                    c += d.text().replace(/\n/g, "").replace(/  /g, "")
                }
            });
            return c
        }
    })
});
actions.confirmRenumber = function(d, c) {
    var b = "/chapter/renumber";
    if (bookId) {
        $.ajax({
            type: "POST",
            url: b,
            data: {
                bookId: bookId
            },
            success: function(e) {
                if (e.err == ApiError.SUCCESS) {
                    Materialize.toast("Yêu cầu thành công. Vui lòng đợi số chương được đánh lại.", 5000);
                    location.reload()
                } else {
                    if (e.err == ApiError.PARAMS_INVALID) {
                        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 5000)
                    } else {
                        Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 5000)
                    }
                }
            },
            error: function(g, e, f) {}
        })
    }
}
;
actions.confirmCopyright = function(d, c) {
    var b = "/book/block";
    if (bookId) {
        $.ajax({
            type: "POST",
            url: b,
            data: {
                bookId: bookId,
                type: 1,
                value: $("#btnCopyright").data("value")
            },
            success: function(e) {
                if (e.err == ApiError.SUCCESS) {
                    Materialize.toast("Yêu cầu thành công.", 5000);
                    location.reload()
                } else {
                    if (e.err == ApiError.PARAMS_INVALID) {
                        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 5000)
                    } else {
                        Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 5000)
                    }
                }
            },
            error: function(g, e, f) {}
        })
    }
}
;
actions.confirmOffensive = function(d, c) {
    var b = "/book/block";
    if (bookId) {
        $.ajax({
            type: "POST",
            url: b,
            data: {
                bookId: bookId,
                type: 2,
                value: $("#btnOffensive").data("value")
            },
            success: function(e) {
                if (e.err == ApiError.SUCCESS) {
                    Materialize.toast("Yêu cầu thành công.", 5000);
                    location.reload()
                } else {
                    if (e.err == ApiError.PARAMS_INVALID) {
                        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 5000)
                    } else {
                        Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 5000)
                    }
                }
            },
            error: function(g, e, f) {}
        })
    }
}
;
actions.confirmNoAd = function(d, c) {
    var b = "/book/block";
    if (bookId) {
        $.ajax({
            type: "POST",
            url: b,
            data: {
                bookId: bookId,
                type: 3,
                value: $("#btnNoAd").data("value")
            },
            success: function(e) {
                if (e.err == ApiError.SUCCESS) {
                    Materialize.toast("Yêu cầu thành công.", 5000);
                    location.reload()
                } else {
                    if (e.err == ApiError.PARAMS_INVALID) {
                        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 5000)
                    } else {
                        Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 5000)
                    }
                }
            },
            error: function(g, e, f) {}
        })
    }
}
;
actions.confirmMature = function(d, c) {
    var b = "/book/block";
    if (bookId) {
        $.ajax({
            type: "POST",
            url: b,
            data: {
                bookId: bookId,
                type: 4,
                value: $("#btnMature").data("value")
            },
            success: function(e) {
                if (e.err == ApiError.SUCCESS) {
                    Materialize.toast("Yêu cầu thành công.", 5000);
                    location.reload()
                } else {
                    if (e.err == ApiError.PARAMS_INVALID) {
                        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 5000)
                    } else {
                        Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 5000)
                    }
                }
            },
            error: function(g, e, f) {}
        })
    }
}
;
actions.confirmNoInfoAd = function(d, c) {
    var b = "/book/block";
    if (bookId) {
        $.ajax({
            type: "POST",
            url: b,
            data: {
                bookId: bookId,
                type: 5,
                value: $("#btnNoInfoAd").data("value")
            },
            success: function(e) {
                if (e.err == ApiError.SUCCESS) {
                    Materialize.toast("Yêu cầu thành công.", 5000);
                    location.reload()
                } else {
                    if (e.err == ApiError.PARAMS_INVALID) {
                        Materialize.toast("Vui lòng kiểm tra lại thông tin nhập!", 5000)
                    } else {
                        Materialize.toast("Lỗi không xác định. Vui lòng thử lại sau!", 5000)
                    }
                }
            },
            error: function(g, e, f) {}
        })
    }
}
;
var signFunc = function a(W) {
    function V(d, c) {
        return d >>> c | d << 32 - c
    }
    for (var U, T, S = Math.pow, R = S(2, 32), Q = "length", P = "", O = [], N = 8 * W[Q], M = a.h = a.h || [], L = a.k = a.k || [], K = L[Q], J = {}, I = 2; 64 > K; I++) {
        if (!J[I]) {
            for (U = 0; 313 > U; U += I) {
                J[U] = I
            }
            M[K] = S(I, 0.5) * R | 0,
            L[K++] = S(I, 1 / 3) * R | 0
        }
    }
    for (W += "\x80"; W[Q] % 64 - 56; ) {
        W += "\x00"
    }
    for (U = 0; U < W[Q]; U++) {
        if (T = W.charCodeAt(U),
        T >> 8) {
            return
        }
        O[U >> 2] |= T << (3 - U) % 4 * 8
    }
    for (O[O[Q]] = N / R | 0,
    O[O[Q]] = N,
    T = 0; T < O[Q]; ) {
        var H = O.slice(T, T += 16)
          , G = M;
        for (M = M.slice(0, 8),
        U = 0; 64 > U; U++) {
            var F = H[U - 15]
              , E = H[U - 2]
              , D = M[0]
              , C = M[4]
              , B = M[7] + (V(C, 6) ^ V(C, 11) ^ V(C, 25)) + (C & M[5] ^ ~C & M[6]) + L[U] + (H[U] = 16 > U ? H[U] : H[U - 16] + (V(F, 7) ^ V(F, 18) ^ F >>> 3) + H[U - 7] + (V(E, 17) ^ V(E, 19) ^ E >>> 10) | 0)
              , A = (V(D, 2) ^ V(D, 13) ^ V(D, 22)) + (D & M[1] ^ D & M[2] ^ M[1] & M[2]);
            M = [B + A | 0].concat(M),
            M[4] = M[4] + B | 0
        }
        for (U = 0; 8 > U; U++) {
            M[U] = M[U] + G[U] | 0
        }
    }
    for (U = 0; 8 > U; U++) {
        for (T = 3; T + 1; T--) {
            var z = M[U] >> 8 * T & 255;
            P += (16 > z ? 0 : "") + z.toString(16)
        }
    }
    return P
};
function reverseString(b) {
    return b.split("").reverse().join("")
}
function denoise(c, n) {
    if (!window.atob && !window.btoa) {
        (function(t) {
            var s = "="
              , r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            function v(z, y) {
                var x = r.indexOf(z.charAt(y));
                if (x === -1) {
                    throw "Cannot decode base64"
                }
                return x
            }
            function q(B) {
                var D = 0, A, C, z = B.length, y = [];
                B = String(B);
                if (z === 0) {
                    return B
                }
                if (z % 4 !== 0) {
                    throw "Cannot decode base64"
                }
                if (B.charAt(z - 1) === s) {
                    D = 1;
                    if (B.charAt(z - 2) === s) {
                        D = 2
                    }
                    z -= 4
                }
                for (A = 0; A < z; A += 4) {
                    C = (v(B, A) << 18) | (v(B, A + 1) << 12) | (v(B, A + 2) << 6) | v(B, A + 3);
                    y.push(String.fromCharCode(C >> 16, (C >> 8) & 255, C & 255))
                }
                switch (D) {
                case 1:
                    C = (v(B, A) << 18) | (v(B, A + 1) << 12) | (v(B, A + 2) << 6);
                    y.push(String.fromCharCode(C >> 16, (C >> 8) & 255));
                    break;
                case 2:
                    C = (v(B, A) << 18) | (v(B, A + 1) << 12);
                    y.push(String.fromCharCode(C >> 16));
                    break
                }
                return y.join("")
            }
            function u(A, z) {
                var y = A.charCodeAt(z);
                if (y > 255) {
                    throw "INVALID_CHARACTER_ERR: DOM Exception 5"
                }
                return y
            }
            function w(B) {
                if (arguments.length !== 1) {
                    throw "SyntaxError: exactly one argument required"
                }
                B = String(B);
                var A, C, y = [], z = B.length - B.length % 3;
                if (B.length === 0) {
                    return B
                }
                for (A = 0; A < z; A += 3) {
                    C = (u(B, A) << 16) | (u(B, A + 1) << 8) | u(B, A + 2);
                    y.push(r.charAt(C >> 18));
                    y.push(r.charAt((C >> 12) & 63));
                    y.push(r.charAt((C >> 6) & 63));
                    y.push(r.charAt(C & 63))
                }
                switch (B.length - z) {
                case 1:
                    C = u(B, A) << 16;
                    y.push(r.charAt(C >> 18) + r.charAt((C >> 12) & 63) + s + s);
                    break;
                case 2:
                    C = (u(B, A) << 16) | (u(B, A + 1) << 8);
                    y.push(r.charAt(C >> 18) + r.charAt((C >> 12) & 63) + r.charAt((C >> 6) & 63) + s);
                    break
                }
                return y.join("")
            }
            t.btoa = w;
            t.atoa = q
        }
        )(window)
    }
    function f(q) {
        return q.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1")
    }
    function k(s, r, q) {
        return s.replace(new RegExp(f(r),"g"), q)
    }
    function e(r) {
        for (var q = [], s = 0; s < r.length; s += 2) {
            q.push(parseInt(r.substr(s, 2), 16))
        }
        return q
    }
    function m(q) {
        for (var s = [], r = 0; r < q.length; r++) {
            s.push((q[r] >>> 4).toString(16));
            s.push((q[r] & 15).toString(16))
        }
        return s.join("")
    }
    function o(q) {
        return k(k(btoa(String.fromCharCode.apply(null, q.replace(/\r|\n/g, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" "))), "+", "~"), "/", "_")
    }
    function d(u) {
        for (var s = 0, r = atob(k(k(u.replace(/[ \r\n]+$/, ""), "~", "+"), "_", "/")), t = []; s < r.length; ++s) {
            var q = r.charCodeAt(s).toString(16);
            if (q.length === 1) {
                q = "0" + q
            }
            t[t.length] = q
        }
        return t.join("")
    }
    function j(s, r) {
        for (var q = [], t = 0; t < s.length; t++) {
            q.push(s[t] ^ r[t])
        }
        return q
    }
    var i = c.lastIndexOf("-");
    var h = c.substring(0, i + 1);
    var l = c.substring(i + 1);
    var b = e(d(l));
    var p = e(n);
    var g = j(b, p);
    return h + o(m(g))
}
$("body").on("change", "[data-change]", function(b) {
    var c = $(this).data("change");
    if (c in changes) {
        changes[c]($(this), b)
    }
});
var changes = {
    changeImage: function(d, c) {
        if (window.FileReader) {
            reader = new FileReader();
            var b = d[0].files[0];
            if (b.size > 1024000) {
                Materialize.toast("Ảnh phải nhẹ hơn 1MB", 5000)
            } else {
                reader.onloadend = function(f) {
                    $(d.data("img")).attr("src", f.target.result).removeClass("hide")
                }
                ;
                reader.readAsDataURL(b)
            }
        }
    }
};
